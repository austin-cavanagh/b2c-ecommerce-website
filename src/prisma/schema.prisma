// npx prisma migrate dev --name *name*
// npx prisma migrate dev --name new-cart-item-schema --schema src/prisma/schema.prisma

// npx prisma generate
// npx prisma generate --schema src/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String?           @unique
  name             String?
  picture          String?
  password         String?
  cartId           Int?              @unique
  verified         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  authMethods      UserAuth[]
  verifyUserTokens VerifyUserToken[]
  cart             Cart?
  Order            Order[]
}

model VerifyUserToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
}

model UserAuth {
  id         Int    @id @default(autoincrement())
  provider   String
  providerId String @unique
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  items  CartItem[]
  user   User       @relation(fields: [userId], references: [id])
}

model CartItem {
  id             Int     @id @default(autoincrement())
  cartId         Int
  productId      Int
  price          Int
  stripePriceId  String
  dimensions     String
  customizations Json
  cart           Cart    @relation(fields: [cartId], references: [id])
  product        Product @relation(fields: [productId], references: [id])

  @@index([productId], name: "idx_cart_item_productId")
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  status          String
  paymentProvider String
  paymentMethod   String
  total           Int
  shippingMethod  String
  shippingAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  price     Int
  order     Order @relation(fields: [orderId], references: [id])
}

model Product {
  id                   Int               @id @default(autoincrement())
  name                 String            @unique
  shortDescription     String
  longDescription      String
  craftingTime         Int
  customizationOptions Json
  stripeId             String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  prices               ProductPrice[]
  imageUrls            ImageUrl[]
  categories           ProductCategory[]
  CartItem             CartItem[]
}

model ProductPrice {
  id            Int     @id @default(autoincrement())
  productId     Int
  price         Int
  dimension     String
  stripePriceId String
  product       Product @relation(fields: [productId], references: [id])
}

model ImageUrl {
  id        Int     @id @default(autoincrement())
  productId Int
  imageSrc  String
  imageAlt  String
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  products ProductCategory[]
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Color {
  id   Int    @id @default(autoincrement())
  name String
  code String
}
