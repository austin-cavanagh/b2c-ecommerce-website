// npx prisma migrate dev --name *name*
// npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String?           @unique
  name             String?
  picture          String?
  password         String?
  verified         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  authMethods      UserAuth[]
  verifyUserTokens VerifyUserToken[]
  cart             Cart?
  cartId           Int?
  Order            Order[]
}

model VerifyUserToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
}

model UserAuth {
  id         Int    @id @default(autoincrement())
  provider   String
  providerId String @unique
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
}

model CartItem {
  id             Int     @id @default(autoincrement())
  quantity       Int
  productId      Int
  cartId         Int
  customizations String? @default("")
  cart           Cart    @relation(fields: [cartId], references: [id])
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  items  CartItem[]
  user   User       @relation(fields: [userId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  status          String // For example, "pending", "paid", "shipped", "completed"
  paymentMethod   String // For example, "Stripe", "PayPal"
  total           Int // Total amount charged
  shippingMethod  String // e.g., "pickup", "delivery"
  shippingAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  price     Int
  order     Order @relation(fields: [orderId], references: [id])
}

model Product {
  id               Int            @id @default(autoincrement())
  name             String
  shortDescription String?
  longDescription  String?
  categoryId       Int?
  prices           ProductPrice[] // Updated relation to product prices
  Category         Category?      @relation(fields: [categoryId], references: [id])
  imageUrls        ImageUrl[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model ProductPrice {
  id        Int     @id @default(autoincrement())
  productId Int
  dimension String
  price     Int
  product   Product @relation(fields: [productId], references: [id])
}

model ImageUrl {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  url       String
  altText   String?
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Color {
  id   Int    @id @default(autoincrement())
  name String
  code String
}
